type TodoUser @pent(type_id: 100000) {
    id: UUID!
    name: String!
    username: String!
        #     define_edge(
        #     edge_name='user_to_list_edge',
        #     edge_id=192381923,
        #     from_id_attr='owner_id',
        # )
    # todoLists(first: Int = 100, after: UUID): [TodoList!]! @customGen
    todoLists(first: Int = 100, after: UUID): [TodoList!]!
        @edgeToStoredId(edgeName: "user_to_list_edge", edgeId: 2039430, field: "owner")
}

type TodoList @pent(type_id: 100002) {
    id: UUID!
    name: String!
    owner: TodoUser @genFromStoredId
}

type TodoItem @pent(type_id: 100001) {
    id: UUID!
    text: String!
}

input CreateTodoUserData @pentMutationData {
    name: String!
    username: String!
}

input CreateTodoListData @pentMutationData {
    name: String!
    ownerId: UUID!
}

input UpdateTodoUserData @pentMutationData {
    name: String
}

input CreateTodoItemData @pentMutationData {
    text: String!
}

type Query {
    todoUser(id: UUID!): TodoUser @readPent
    allTodoUsers(first: Int = 100, after: UUID): [TodoUser!]! @browsePents

    todoItem(id: UUID!): TodoItem @readPent
    allTodoItems(first: Int = 100, after: UUID): [TodoItem!]! @browsePents

    todoList(id: UUID!): TodoList @readPent
}

type Mutation {
    createTodoUser(data: CreateTodoUserData!): TodoUser @createPent
    updateTodoUser(id: UUID!, data: UpdateTodoUserData!): TodoUser @updatePent
    deleteTodoUser(id: UUID!): TodoUser @deletePent

    createTodoList(data: CreateTodoListData!): TodoList @createPent

    createTodoItem(data: CreateTodoItemData!): TodoItem @createPent
    deleteTodoItem(id: UUID!): TodoItem @deletePent
}
